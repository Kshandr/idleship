<html>
<head>
	<title></title>
<script>
// **********************************************************************************
// Miscellaneous Functions

	function padStr(str,len)
	{
		while(str.length<len)
			str = "0" + str.toString();

		return str;
	}

	function getParameterByName(name) 
	{
		name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
		var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
		results = regex.exec(location.search);
		return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
	}

	function getMousePos(canvas, evt) 
	{
		var rect = canvas.getBoundingClientRect();
		return { x: evt.clientX - rect.left, y: evt.clientY - rect.top};
	}

	function getScriptURL() 
	{
    		var scripts = document.getElementsByTagName('script');
    		var index = scripts.length - 1;
    		var myScript = scripts[index];
    
    		return myScript.src;
	}

// **********************************************************************************
// Initialisation Functions

	function initialiseWeaponsList()
	{
		// weaponName,damageMax,damageMin,usesAmmo,
		// currentAmmo,cooldown,chanceToHit,
		// chanceToPuncture, chanceToBurn

		var weaponList=[
			new weapon("Laser I",5,1,0,0,1,80,0,0),
			new weapon("Laser II",8,3,0,0,1,80,0,0),
			new weapon("Missile I",10,3,1,2,1,80,0,0),
			new weapon("Mass Driver",5,1,0,0,1,80,20,0),
			new weapon("Singularity Cannon",8,3,0,0,1,80,0,20)
			];
	
		return weaponList;
	}

	function initialiseShipsList()
	{
		// hullpoints,shieldpoints,vesselname,vesselclass,
		// hardpoints,crewspaces, cargobaysize

		var shipList = [
			new ship(10,10,"Unknown","Cricket",1,1,2),
			new ship(10,10,"Unknown","Locust",2,2,5),
			new ship(30,30,"Unknown","Scarab",3,2,10),
			new ship(30,30,"Unknown","Horned Beetle",5,4,20)
		];

		return shipList;
	}

	function initialiseCargoList()
	{
		var cargoList = [{name:"Food", baseprice:10}, 
					{name:"Furs", baseprice:30},
					{name:"Metals", baseprice:150},
					{name:"Electronics", baseprice:600},
					{name:"Liquids", baseprice:50},
					{name:"Exotics", baseprice:1000},
					{name:"Artifacts", baseprice:10},
					{name:"Ceramics", baseprice:100},
					{name:"Gems", baseprice:2000},
					{name:"Drugs", baseprice:3000},
					{name:"Computers", baseprice:200},
					{name:"Plastics", baseprice:150},
					{name:"Art", baseprice:300},
					{name:"Machines", baseprice:500}
		];

		return cargoList;
	}

	function nameSystem(randomNumber)
	{	
		var myName = "";
		var startSyllables = ["ro","ta","har","xy","yin","fi","la","di","pi","or","yr","ha","qua","ra","tch","f","b","s"];
		var middleSyllables = ["o","i","a","u","o","ja","ma","bu","qua","el","re","qi"];
		var middleSyllablesB = ["ud","um","ig","il","es","is","ay"];
		var endSyllables = ["th","es","sc","k","na","dy","ug","ten","w","s","rag","rn","ts",
							"o","sch","fil","dja","kil","hop","tep"];
	
			var x = (randomNumber % 6) + 1;	

			if(x==1)
			{
				randomNumber = randomNumber + Math.floor(Math.sin(randomNumber));
 				myName = startSyllables[Math.floor(randomNumber % startSyllables.length)] +
   							endSyllables[Math.floor(randomNumber % endSyllables.length)]; 
			}
			else if(x==2)
			{
				randomNumber = randomNumber + Math.floor(Math.sqrt(randomNumber));
 				myName = startSyllables[Math.floor(randomNumber % startSyllables.length)] +
   							middleSyllables[Math.floor(randomNumber % middleSyllables.length)] +
   							endSyllables[Math.floor(randomNumber % endSyllables.length)];
			}
			else if(x==3)
			{
				randomNumber = randomNumber + Math.floor(Math.cos(randomNumber));
 				myName = startSyllables[Math.floor(randomNumber % startSyllables.length)] +
   							middleSyllables[Math.floor(randomNumber % middleSyllables.length)] +
   						middleSyllablesB[Math.floor((randomNumber+1) % middleSyllablesB.length)] +
  	 						endSyllables[Math.floor((randomNumber+2) % endSyllables.length)];
			}
			else if(x==4)
			{
				randomNumber = randomNumber + Math.floor(Math.cos(randomNumber));
 				myName = startSyllables[Math.floor(randomNumber % startSyllables.length)] +
   							middleSyllables[Math.floor(randomNumber % middleSyllables.length)] +
   							middleSyllables[Math.floor((randomNumber+2) % middleSyllables.length)] +
   							middleSyllables[Math.floor((randomNumber+4) % middleSyllables.length)] +
   							endSyllables[Math.floor((randomNumber+6) % endSyllables.length)];
			}
			else if(x==5)
			{
				randomNumber = randomNumber + Math.floor(Math.sin(randomNumber));
 				myName = startSyllables[Math.floor(randomNumber % startSyllables.length)] +
   							middleSyllablesB[Math.floor(randomNumber % middleSyllablesB.length)] +
   							middleSyllablesB[Math.floor((randomNumber+2) % middleSyllablesB.length)] +
   							endSyllables[Math.floor((randomNumber+6) % endSyllables.length)];
			}
 			else if(x==6)
			{
				randomNumber = randomNumber + Math.floor(Math.sqrt(randomNumber));
 				myName = startSyllables[Math.floor(randomNumber % startSyllables.length)] +
   							middleSyllablesB[Math.floor(randomNumber % middleSyllablesB.length)] +
   							endSyllables[Math.floor(randomNumber % endSyllables.length)];
			}
		
	 	myName = myName.substring(0,1).toUpperCase() + myName.substring(1,myName.length);
 
 		return myName;
	}

	function getManySystemNames(target)
	{
		var arr = [];
    	 
		var placed = 0;
		var found = 0;
		var tempName = "";
		
		for(i = 0;i<10000;i++)
		{
			tempName = nameSystem(i);
				
			for(j = 0;j<placed;j++)
			{
				if(arr[j]==tempName)
				{
					found = 1;				
					break;
				}
			}
		
			if(found == 0)
			{
				arr[placed] = tempName;
				placed++;
			}
		
			found = 0;
			
			if(placed==target)
				break;
		}

		return arr;
	}

// **********************************************************************************
// Entities

	function game()
	{
		this.mode = "";
		this.tab = "";
		this.credit = 0;
		this.fuel = 0;
		this.jumpdestinationid = 0
	}

	function starsystem(idNumber)
	{
		this.id = idNumber;
		this.name = planetNameArray[idNumber];
		this.stockmarketprices = [cargoList.length];
		this.xpos = 0;
		this.ypos = 0;
		this.flavourText = "";
		this.color = 0;

		// Figure Stockmarket - NEEDS REWORKING
		for(i=0;i<cargoList.length;i++)
		{
			// Price should be base +/- 10%, which we'll
			// calculate as 80% + a random number 1% - 20%.
			var outPrice = cargoList[i].baseprice * 0.8;
			var rndFactor = Math.floor(Math.random() *
					(cargoList[i].baseprice * 0.2));
			outPrice = outPrice + rndFactor;

			var quantity = Math.floor(Math.random() * 20);

			this.stockmarketprices[i] = new stockline(outPrice, quantity);
		}

		// Figure galactic co-ordinates
		var x = (idNumber % 4) + 1;
		var i = 0;
		var j = 0;

		if(x==0) 
		{
			i = 200; j = 200;
		}
		else if(x==1) 
		{
			i = 200; j = 0;
		}
		else if(x==2) 
		{
 			i=0; j=200;
		}
		else if(x==3)
		{
 			i = 0; j = 0;
		}

		i = i + Math.floor(parseInt(Math.sin(idNumber).toString().substring(6,9))/2);
		j = j + Math.floor(parseInt(Math.cos(idNumber).toString().substring(6,9))/2);
 
		while(i > 400)
 			i = i - idNumber;

		if(i<0) i = idNumber;
 
		while(j > 400)
			j = j - idNumber;
 
		if(j<0) j=idNumber;
 
 		this.xpos = i;
		this.ypos = j;

		var x =  Math.sin(idNumber);

		var x = x.toString();
	
		var races = ["Humans","Krayce","Tarn","Teth","Eyclasa","Irif","humanoid life forms","Anfar","Girrians","insectoid life forms"];
		var artifactOwners = ["the Seeders","the Builders","an unknown, ancient race"];
		var descriptor = ["arid","damp","humid","desert","jungle","frozen","savannah","rocky","underwater","forest"];
		var systemTypes = ["red giant","yellow star","blue star","white dwarf","brown dwarf"];

		if(idNumber%2==0)
		{
			var flavourText = "The " + this.name + " system consists of " +
								parseInt(Math.floor(parseInt(x.substring(3,4))/2)+1) + " planets, orbitting a " +
								systemTypes[parseInt(Math.floor(x.substring(4,5))/2)] + ". " +
								"The system's most inhabited planet is " + descriptor[parseInt(x.substring(5,6))] + ", " +
								"and is mostly inhabited by " + races[parseInt(x.substring(6,7))] + ".";
		}
		else if(idNumber%2==1)
		{
			var flavourText = this.name + " is a  " + systemTypes[parseInt(Math.floor(x.substring(4,5))/2)] + " system, home to " +
								Math.floor(parseInt(x.substring(3,4))) + " million " +
								races[parseInt(x.substring(6,7))] + ".";
								
		}

		var planetColor = parseInt(Math.floor(x.substring(4,5))/2);
	
		this.flavourText = flavourText;
		this.color = planetColor;
	
		this.getCargoQtyById = function(cargoType)
		{
			qty = -1;

			for(i=0;i<this.stockmarketprices.length;i++)
			{
				if(this.stockmarketprices[i].quantity>0)
					qty = this.stockmarketprices[i].quantity;
			}

			return qty;
		}

		this.removeCargo = function(cargoType,quantity)
		{
			for(i=0;i<cargoList.length;i++)
			{
				if(i==cargoType)
				{
					if(this.stockmarketprices[i].quantity>quantity)
					{
						this.stockmarketprices[i].quantity = 
							this.stockmarketprices[i].quantity -
							quantity;
					}
					else
					{
						this.stockmarketprices[i].quantity = 0;
					}
				}
			}		
		}

		this.getSystemsInRange = function(distance)
		{
			var systems = [];
			var sysCount = 0;
	
			for(i=0;i<NUMBEROFSYSTEMS;i++)
			{
				var tempSystem = new starsystem(i);

				if(!isNaN(tempSystem.xpos))
				{
					var distanceFromCurrent = Math.sqrt(
						(Math.abs(this.xpos - tempSystem.xpos)^2) +
						(Math.abs(this.ypos - tempSystem.ypos)^2));
	
					if(distanceFromCurrent <= distance)
					{
						systems[sysCount] = new systemsList(i,distanceFromCurrent);
						sysCount++;					
					}
				}
			}

			systems.sort(function(a,b){ return a.distance - b.distance; });
			return systems;			
		}

		this.getDistance = function(id)
		{
			var tempSystem = new starsystem(id);

			var distance = Math.sqrt(
					(Math.abs(this.xpos - tempSystem.xpos)^2) +
					(Math.abs(this.ypos - tempSystem.ypos)^2));

			return distance;
		}
	}

	function systemsList (id,dist)
	{
		this.id = id;
		this.distance = dist;
	}

	function stockline (pr,qu)
	{
		this.price = pr;
		this.quantity = qu;
	}

	function cargobay(size)
	{
		this.size=size;
		this.contents = [size];

		for(i = 0; i < size; i++)
			this.contents[i] = new cargoitem(-1,0);

		this.getEmptySpace = function()
		{
			var freeSpace = this.size;

			for(i=0;i<this.size;i++)
			{
				freeSpace = freeSpace - this.contents[i].quantity;
			}

			return freeSpace;
		}

		this.getQtyById = function(cargoType)
		{
			qty = -1;

			for(i=0;i<this.size;i++)
			{
				if(this.contents[i].id==cargoType)
					qty = this.contents[i].quantity;
			}

			return qty;
		}

		this.addCargo = function(cargoType,quantity)
		{
			quantity = parseInt(quantity);

			found = -1;

			for(i=0;i<this.size;i++)
			{
				if(this.contents[i].id==cargoType)
				{
					this.contents[i].quantity = this.contents[i].quantity +
									quantity;
				
					found = 1;
				}
			}

			if(found == -1)
			{
				for(i=0;i<this.size;i++)
				{
					if(this.contents[i].id==-1)
					{
						this.contents[i] = new cargoitem(cargoType,
										quantity);
						break;
					}
				}
			}
		}

		this.removeCargo = function(cargoType,quantity)
		{
			quantity = parseInt(quantity);

			for(i=0;i<this.size;i++)
			{
				if(this.contents[i].id==cargoType)
				{
					if(this.contents[i].quantity>quantity)
					{
						this.contents[i].quantity = this.contents[i].quantity -
										quantity;
					}
					else
					{
						this.contents[i].quantity = 0;
						this.contents[i].id = -1;
					}
				}
			}		
		}
	}

	function cargoitem(cargoType,quantity)
	{
		this.id = cargoType;

		if(this.id!=-1)
		{
			this.name = cargoList[cargoType];
		}

		this.quantity = quantity;
	}

	function weapon(weaponName,damageMax,damageMin,usesAmmo,
			currentAmmo,cooldown,chanceToHit,
			chanceToPuncture, chanceToBurn)
	{
		// Properties

		this.name = weaponName;
		this.maxdamage = damageMax;
		this.mindamage = damageMin;
		this.usesammo = usesAmmo;
		this.cooldown = cooldown;
		this.cooldownticksremaining = 0;
		this.currentammo = currentAmmo;
		this.chancetohit = chanceToHit;
		this.chancetopuncture = chanceToPuncture;
		this.chancetoburn = chanceToBurn;

		// Methods

		this.calculateDamage = function()
		{
			var damage = 0;

			damage = Math.floor(Math.random() * 
					(damageMax - damageMin + 1)
					+(damageMin));

			return damage; 
		}

		this.fire = function()
		{
			var dmg = 0;
			var burning = 0;
			var punctured = 0;

			var randResult = Math.floor(Math.random() * 100) + 1;

			if((this.usesammo==1) && (this.currentammo>0))
				this.currentammo--;
			else if((this.usesammo==1) && (this.currentammo==0))
				dmg = -1;

			if((randResult < this.chancetohit)&&(dmg!=-1))
			{
				dmg = this.calculateDamage();
			}
			else
			{
				dmg = 0; // Damage 0 is a miss.
			}

			var randResult = Math.floor(Math.random() * 100) + 1;
			if(randResult < this.chancetopuncture)
				punctured = 1;

			var randResult = Math.floor(Math.random() * 100) + 1;
			if(randResult < this.chancetoburn)
				burning = 1;

			this.cooldownticksremaining = this.cooldown;

			return {damage: dmg, punctured: punctured, burning: burning};
		}
	}

	function crewmember(crewmembername,race)
	{
		// Properties

		this.crewmembername = crewmembername;
		this.race = race;
		this.dead = 0;

		// Methods

		this.generateRandomName = function()
		{
			var firstNames = ["Efrain","Lorenzo","Everett","Jamie",
						"Randall","Darius","Howard",
						"Gene","Alyssa",
						"Dina","Elaine","Marissa",
						"Connie","Debbie","Anna"];
			var lastNames = ["Juarez","Moore","Nelson","Cooper",
						"Gray","Kim","West","Olson",
						"Stone","Knight","Lane","Vargas"];

			return firstNames[Math.floor(Math.random() * 
						firstNames.length)] + " " +
						lastNames[Math.floor(Math.random() *
						lastNames.length)];
		}
	}

	function ship(hullpoints,shieldpoints,vesselname,vesselclass,
			hardpoints,crewspaces,cargobaysize)
	{
		// Properties

		this.hull = hullpoints;
		this.shields = shieldpoints;
		this.name = vesselname;
		this.vesselclass = vesselclass;
		this.destroyed = 0;
		this.derelict = 0;
		this.hardpoints = hardpoints;
		this.weapons = [this.hardpoints];
		this.crewspaces = crewspaces;
		this.crew = [this.crewspaces];
		this.punctured = 0;
		this.burning = 0;
		this.cargobay = new cargobay(cargobaysize);

		// Methods

		this.takeDamage = function(dmg) 
		{
			if(this.shields>=dmg)
			{
				this.shields = this.shields - dmg;
			}
			else
			{
				dmg = dmg - this.shields;
				this.shields = 0;

				if(this.hull>dmg)
				{
					this.hull = this.hull - dmg;
				}
				else
				{
					this.hull = 0;
					this.destroyed = 1;
				}
			}
		}

		this.updateCooldowns = function()
		{
			for(i=0;i<this.hardpoints;i++)
			{
				if(this.weapons[i].cooldownticksremaining>0)
				{
					this.weapons[i].cooldownticksremaining--;
				}
			}
		}

		this.getRandomLivingCrewmember = function()
		{
			var deadCrew = Math.floor(Math.random() * 
					this.crewspaces);

			while(this.crew[deadCrew].dead==1)
			{
				deadCrew = Math.floor(Math.random() * 
						this.crewspaces);
			}
	
			return deadCrew;
		}

		this.checkDerelict = function()
		{	
			var crewDead = 0;
			var crewLiving = 0;

			for(i=0;i<this.crewspaces;i++)
			{
				if(this.crew[i].dead==1)
					crewDead++;
				else
					crewLiving++;
			}

			if(crewLiving==0)
				this.derelict = 1;
		}

		this.getFullShipName = function()
		{
			return "\"" + this.vesselclass + "\"-class vessel " +
				"\"" + this.name + "\"";
		}

		this.handleBurning = function()
		{
			var outMsg = "";

			if(this.burning == 1)
			{
				outMsg = outMsg + "\"" + this.name + "\" suffers " +
						BURNDAMAGE + " points of fire damage!\n";
				this.takeDamage(BURNDAMAGE);
	
				var rand = Math.floor(Math.random()*100)+1;
			
				if(rand < BURNTODEATHCHANCE)
				{
					var deadCrew = this.getRandomLivingCrewmember();
	
					outMsg = outMsg + "Crewmember " + 
							this.crew[deadCrew].name + " " +
							"burns to death!";
	
					this.crew[deadCrew].dead=1;	
				}
			}

			return outMsg;
		}

		this.handlePunctured = function()
		{
			var outMsg = "";

			if(this.punctured == 1)
			{
				var rand = Math.floor(Math.random()*100+1);

				if(rand < SUCKEDINTOSPACECHANCE)
				{
					var deadCrew = this.getRandomLivingCrewmember();
	
					outMsg = outMsg + "Crewmember " + 
								this.crew[deadCrew].name + " " +
								"is sucked out of the hole in the " +
								"ship!\n";
	
					this.crew[deadCrew].dead=1;
				}
			}

			return outMsg;
		}

		this.generateRandomShip = function()
		{
			var rndShip = Math.floor(Math.random() * 
					shipsList.length);

			var outShip = new ship(shipsList[rndShip].hull,
						shipsList[rndShip].shields,
						shipsList[rndShip].name,
						shipsList[rndShip].vesselclass,
						shipsList[rndShip].hardpoints,
						shipsList[rndShip].crewspaces,
						shipsList[rndShip].cargobay.size);

			for(i=0;i<outShip.hardpoints;i++)
			{
				var rndWpn = Math.floor(Math.random() * 
					weaponsList.length);

				outShip.weapons[i] = new weapon(weaponsList[rndWpn].name,
								weaponsList[rndWpn].maxdamage,
								weaponsList[rndWpn].mindamage,
								weaponsList[rndWpn].usesammo,
								2,
								weaponsList[rndWpn].cooldown,
								weaponsList[rndWpn].chancetohit,
								weaponsList[rndWpn].chancetopuncture,
								weaponsList[rndWpn].chancetoburn);
			}

			for(i=0;i<outShip.crewspaces;i++)
			{
				outShip.crew[i] = new crewmember("","Human");
				outShip.crew[i].name = outShip.crew[i].generateRandomName();
			}

			var rndCargo = Math.floor(Math.random() *
					outShip.cargobay.size);
			
			for(i=0;i<rndCargo;i++)
			{
				var cargoType = Math.floor(Math.random() *
							cargoList.length);

				outShip.cargobay.addCargo(cargoType,1);
			}

			return outShip;
		}
	}

// **********************************************************************************
// Gameplay functions

	function takeEnemyVesselTurn(ship)
	{
		// For now, this will involve picking a random weapon and firing it
		// but should be expanded to involve differing behaviour types for 
		// enemies.

		var outMsg = "";
		var fired = 0;
		var runOutOfWeapons = 0;
		var dmg = 0;
		var unableToFireHardpoint = [ship.hardpoints];
		var cannotFire = 0;
		var burning = 0;
		var punctured = 0;

		for(i=0;i<ship.hardpoints;i++)
			unableToFireHardpoint[i] = 0;

		while((fired==0) && (runOutOfWeapons==0))
		{
			var toFire = Math.floor(Math.random() * ship.hardpoints);

			if(((ship.weapons[toFire].usesammo==1) && 
				(ship.weapons[toFire].currentammo==0)) ||
				(ship.weapons[toFire].cooldownticksremaining>0))
			{
				unableToFireHardpoint[toFire] = 1;
				
				cannotFire = 1;

				for(i=0;i<ship.hardpoints;i++)
				{
					if(unableToFireHardpoint[i]==0)
						cannotFire = 0;
				}

				if(cannotFire==1)
				{
					outMsg = outMsg + ship.getFullShipName() +
							" cannot fire " +
							"any weapons!\n";

					runOutOfWeapons = 1;
				}
			}
			else
			{
				fired = 1;
			}
		}

		if(runOutOfWeapons==0)
		{
			var fireResult = ship.weapons[toFire].fire();

			dmg = fireResult.damage;

			// kludge to prevent cooldowns happening too fast...

			ship.weapons[toFire].cooldownticksremaining++;

			// end kludge

			if(dmg>0)
			{
				outMsg = outMsg + ship.getFullShipName() +  
					" fires its " + 
					ship.weapons[toFire].name + " causing " +
					dmg + " damage to you!\n";
		
				burning = fireResult.burning;
				punctured = fireResult.punctured;
			}
			else
			{
				outMsg = outMsg + ship.getFullShipName() +  
					" fires its " + 
					ship.weapons[toFire].name + " but misses!\n";
			}
			
			fired = 1;
		}

		return {damage: dmg, message: outMsg,
			burning: burning, punctured: punctured};
	}

	function performBeforeTurnActions()
	{
		var outMsg = "";
		var dateObj = new Date();
	
		outMsg = "Turn taken at " + padStr(dateObj.getHours().toString(),2) + ":" +
				padStr(dateObj.getMinutes().toString(),2) + ":" +
				padStr(dateObj.getSeconds().toString(),2) + "\n";

		playerVessel.updateCooldowns();

		updateLog(outMsg);
	}

	function performAfterTurnActions()
	{
		var outMsg = "";

		if(typeof enemyVessel!="undefined")
		{
			if(enemyVessel.destroyed==0)
			{
				enemyVesselTurnResult = takeEnemyVesselTurn(enemyVessel);
				playerVessel.takeDamage(enemyVesselTurnResult.damage);
				outMsg = outMsg + enemyVesselTurnResult.message;
	
				if(enemyVesselTurnResult.burning==1)
				{
					playerVessel.burning = 1;
					outMsg = outMsg + "A fire has broken out aboard your ship!\n";
				}

				if(enemyVesselTurnResult.punctured==1)
				{
					playerVessel.punctured = 1;
					outMsg = outMsg + "A projectile has punctured your ship!\n";
				}
			}
		}

		outMsg = outMsg + playerVessel.handleBurning();
		outMsg = outMsg + playerVessel.handlePunctured();

		playerVessel.checkDerelict();

		if(typeof enemyVessel!="undefined")
		{
			outMsg = outMsg + enemyVessel.handleBurning();
			outMsg = outMsg + enemyVessel.handlePunctured();

			enemyVessel.checkDerelict();

			enemyVessel.updateCooldowns();
		}

		updateLog(outMsg);
	}

	function flee()
	{
		var outMsg = "";

		outMsg = "You attempt to flee combat...";

		var rand = Math.floor(Math.random()*2)+1;

		if(rand==1)
		{
			outMsg = outMsg + " and succeed!\n";
			enemyVessel = undefined;
		}
		else
		{
			outMsg = outMsg + " and fail!\n";
		}

		updateLog(outMsg);
	}

	function firePlayerWeapon(weapon)
	{
		var outMsg = "";
	
		var fireResponse = playerVessel.weapons[weapon].fire();

		var dmg = fireResponse.damage;
		var burnCaused = fireResponse.burning;
		var punctureCaused = fireResponse.punctured;

		if(dmg>0)
		{
			outMsg = outMsg + "You fire your " + playerVessel.weapons[weapon].name + 
						" - Pew pew! - inflicting " + dmg + 
						" damage.\n";
		}
		else
		{
			outMsg = outMsg + "You fire your " + playerVessel.weapons[weapon].name +
						" - but miss!\n";
		}

		if(burnCaused==1)
		{
			outMsg = outMsg + "You have caused a fire aboard your enemy's vessel!\n";
			enemyVessel.burning = 1; 
		}

		if(punctureCaused==1)
		{
			outMsg = outMsg + "Your shot has punctured your opponent's ship!\n";
			enemyVessel.punctured = 1;
		}

		enemyVessel.takeDamage(dmg);

		updateLog(outMsg);
	}

	function patrolSpace()
	{
		var outs = "";

		enemyVessel = new ship().generateRandomShip();
		
		outs = "You patrol, and encounter " + enemyVessel.getFullShipName() + "\n";

		return outs;
	}
</script>
</head>
<body>
<div id="outputwindow"></div>
<div id="hudwindow"></div>
<br>
<textarea cols="100" rows="10" id="log"></textarea>
<script>
// **********************************************************************************
// UI functions (should be contained within the UI section)

function setJumpDestination(id)
{
	gameRef.jumpdestinationid = id;
}

function doJump()
{
	var outStr = "";

	gameRef.fuel = gameRef.fuel - Math.round(currentSystem.getDistance(gameRef.jumpdestinationid));

	outStr = outStr + "Engaging Jump Drive to the " +
			new starsystem(gameRef.jumpdestinationid).name + " " +
			"system...\n";
	outStr = outStr + "*POP*\n";

	enemyVessel = new ship().generateRandomShip();
		
	outStr = outStr + "You arrive, and are attacked by " + 
			enemyVessel.getFullShipName() + "\n";

	currentSystem = new starsystem(gameRef.jumpdestinationid);

	return outStr;
}

function doDock()
{
	var outStr = "";

	if((playerVessel.burning==1) || (playerVessel.punctured==1))
	{

		outStr = outStr + "You patch your ship up before docking...\n";

		if(playerVessel.burning==1)
			outStr = outStr + "Your vessel is no longer burning.\n";

		if(playerVessel.punctured==1)
			outStr = outStr + "Your vessel is no longer punctured.\n";

		playerVessel.burning = 0;
		playerVessel.punctured = 0;

		
	}

	return outStr;
}

function updateQty(sellorbuy,plusorminus,id)
{
	if(plusorminus=="+")
	{
		document.getElementById(sellorbuy + "qty" + id).value++;
	}
	else
	{
		document.getElementById(sellorbuy + "qty" + id).value--;
	}

	// handle all "less than zero" cases
	if(document.getElementById(sellorbuy + "qty" + id).value < 0)
		document.getElementById(sellorbuy + "qty" + id).value = 0;

	if(sellorbuy=="s")
	{
		if(document.getElementById(sellorbuy + "qty" + id).value >
			playerVessel.cargobay.getQtyById(id))
			document.getElementById(sellorbuy + "qty" + id).value = 
			playerVessel.cargobay.getQtyById(id);	
	}
}

function buycargo(cargoid)
{
	var err = "";

	var toBuy = document.getElementById("bqty" + cargoid).value;

	if(toBuy>playerVessel.cargobay.getEmptySpace)
	{
		err = "You do not have enough free cargo space to buy " + toBuy + " " +
			cargoList[cargoid].name;
	}
	else
	{
		var cashRequirement = currentSystem.stockmarketprices[cargoid].price *
			toBuy;

		if(cashRequirement > gameRef.credit)
		{
			err = "You cannot afford the " + cashRequirement + "c to buy " +
				toBuy + " x " + cargoList[cargoid].name;
		}
		else
		{
			if(toBuy > currentSystem.stockmarketprices[cargoid].quantity)
			{
				err = "Seller does not have that much " + 
					cargoList[cargoid].name;
			}
			else
			{
				if(toBuy>0)
				{
					err = "You buy " + toBuy + " x " + cargoList[cargoid].name;
					playerVessel.cargobay.addCargo(cargoid, toBuy);
					currentSystem.removeCargo(cargoid, toBuy);
					gameRef.credit = gameRef.credit - cashRequirement;
					paintDockedMode();	
				}
			}
		}
	}

	if(toBuy>0)
	{
		document.getElementById("log").value = document.getElementById("log").value +
							err + "\n";
	}
}	

function sellcargo(cargoid)
{
	var err = "";

	var toSell = document.getElementById("sqty" + cargoid).value;

	var cashGained = currentSystem.stockmarketprices[cargoid].price 
				* toSell;

	if(toSell > playerVessel.cargobay.getQtyById(cargoid))
	{
		err = "You do not have enough cargo to sell " + toSell + " x " +
			cargoList[cargoid].name;
	}
	else
	{
		if(toSell>0)
		{
			err = "You sell " + toSell + " x " + cargoList[cargoid].name;
			playerVessel.cargobay.removeCargo(cargoid, toSell);
			gameRef.credit = gameRef.credit + cashGained;
			paintDockedMode();
		}
	}

	if(toSell>0)
	{
		document.getElementById("log").value = document.getElementById("log").value +
							err + "\n";	
	}
}

// **********************************************************************************
// Display functions (should be contained within the UI section)

function showShipDetails(ship)
{
	var outs = "";
	var crewLiving = 0;
	var crewDead = 0;

	outs = outs + ship.getFullShipName() + "<br>\n";
	outs = outs + "Shields : " + ship.shields + " / Hull : " + ship.hull + "<br>\n";

	for(i=0;i<ship.crewspaces;i++)
	{
		if(ship.crew[i].dead==1)
			crewDead++;
		else
			crewLiving++;
	}

	outs = outs + "Crew : " + crewLiving + " (" + crewDead + " dead.)<br>\n";

	for(i=0;i<ship.hardpoints;i++)
	{
		if(ship.weapons[i].cooldownticksremaining>0)
			outs = outs + "<font color=\"#AAAAAA\">";

		outs = outs + "Hardpoint " + (i+1) + ": " + 
				ship.weapons[i].name;

		if(ship.weapons[i].usesammo==1)
		{
			outs = outs + "  (" + ship.weapons[i].currentammo + 
					" remaining)";
		}

		if(ship.weapons[i].cooldownticksremaining>0)
			outs = outs + "</font>";
		outs = outs + "<br>\n";
	}

	if(ship.burning==1)
		outs = outs + "<strong><font color=\"orange\">BURNING</font></strong>\n";

	if(ship.punctured==1)
		outs = outs + "<strong><font color=\"blue\">PUNCTURED</font></strong>\n";

	return outs;
}

function updateLog(outStr)
{
	document.getElementById("log").value = document.getElementById("log").value +
						outStr;

	var textarea = document.getElementById('log');
	textarea.scrollTop = textarea.scrollHeight;

	paintPlayerHUD();
}

function showShipCargo(ship)
{
	var outs = "";
	var i = 0;

	outs = outs + "<p><strong>Cargo for " + ship.getFullShipName() +
				"</strong></p>\n";

	outs = outs + "<table>\n";

	for(i = 0;i<ship.cargobay.size;i++)
	{
		if(ship.cargobay.contents[i].id!=-1)
		{
			outs = outs + "<tr>\n";
			outs = outs + "<td>" + cargoList[ship.cargobay.contents[i].id].name + 
				"</td><td>" + ship.cargobay.contents[i].quantity + "</td>\n";
			outs = outs + "</tr>\n";
		}
	}

	outs = outs + "</table>\n";

	outs = outs + "<p>" + ship.cargobay.getEmptySpace() + " cargo pods available.</p>\n";

	return outs;
}

function paintPlayerCargo()
{
	var outs = "";

	outs = outs + showShipCargo(playerVessel);

	outs = outs + "<input type=\"button\" value=\"Back\" " +
			"onclick=\"paintPlayerHUD();\">";

	document.getElementById("hudwindow").innerHTML = outs;

	return outs;
}

function showStockMarket()
{
	var outs = "";

	outs = outs + "<table>\n";
	outs = outs + "<tr>\n";
	outs = outs + "<td align=\"center\"><strong>Product</strong></td>\n";
	outs = outs + "<td align=\"center\"><strong>Price</strong></td>\n";
	outs = outs + "<td align=\"center\"><strong>Qty. Available</strong></td>\n";
	outs = outs + "<td>&nbsp;</td>\n";
	outs = outs + "<td>&nbsp;</td>\n";
	outs = outs + "</tr>\n";

	var rowCount = 0;
	
	for(i=0;i<cargoList.length;i++)
	{
		if(rowCount%2==0)
			outs = outs + "<tr bgcolor=\"#DDDDDD\">\n";
		else
			outs = outs + "<tr>\n";

		outs = outs + "<td align=\"center\">" + cargoList[i].name + "</td>\n";
		outs = outs + "<td align=\"center\">" + currentSystem.stockmarketprices[i].price + "</td>\n";
		outs = outs + "<td align=\"center\">" 
		outs = outs + "<input type=\"text\" size=\"2\" value=\"";
		outs = outs + currentSystem.stockmarketprices[i].quantity;
		outs = outs + "\" id=\"baseqty" + i + "\"></td>\n";
		outs = outs + "<td>";

		outs = outs + "<input type=\"button\" value=\"-\" ";
		outs = outs + "onclick=\"updateQty('b','-'," + i + ");\"";
		outs = outs + ">";
		outs = outs + "<input type=\"text\" size=\"2\" id=\"bqty" + i + "\" value=\"0\">";
		outs = outs + "<input type=\"button\" value=\"+\" ";
		outs = outs + "onclick=\"updateQty('b','+'," + i + ");\"";
		outs = outs + ">";
		outs = outs + "<input type=\"button\" onclick=\"buycargo(" + i + ")\" value=\"buy\">";
		outs = outs + "</td>\n";

		for(j=0;j<playerVessel.cargobay.size;j++)
		{	
			if(playerVessel.cargobay.contents[j].id==i)
			{
				outs = outs + "<td>";
				outs = outs + "<input type=\"button\" value=\"-\" onclick=\"";
				outs = outs + "updateQty('s','-'," + i + ");\">";
				outs = outs + "<input type=\"text\" size=\"2\" ";
				outs = outs + "value=\"" + playerVessel.cargobay.contents[j].quantity +
						"\" id=\"sqty" + i + "\">";
				outs = outs + "<input type=\"button\" value=\"+\" onclick=\"";
				outs = outs + "updateQty('s','+'," + i + ");\">";
				outs = outs + "<input type=\"button\" onclick=\"sellcargo(" + i + ")\" value=\"sell\">";
			}
		}

		outs = outs + "</td>\n";
		outs = outs + "</tr>\n";

		rowCount++;
	}

	outs = outs + "</table>\n";

	return outs;
}

function paintJumpMenu()
{
	var outs = "";

	outs = outs + "<p><strong>" + currentSystem.name + "</strong> | ";
	outs = outs + "Current Credit : " + gameRef.credit + "c | ";
	outs = outs + "Current Fuel : " + gameRef.fuel + " | ";
	outs = outs + "Drive Range : " + gameRef.range + "</p>\n";

	outs = outs + "<p><strong>Current Destination : </strong> " +
			new starsystem(gameRef.jumpdestinationid).name + "</p>\n";
	
	var systemList = currentSystem.getSystemsInRange(5);

	outs = outs + "<table>\n";

	outs = outs + "<tr>\n";
	outs = outs + "<td><strong>Name</strong></td>\n";
	outs = outs + "<td><strong>Distance</strong></td>\n";
	outs = outs + "<td>&nbsp;</td>\n";
	outs = outs + "</tr>\n";

	for(i=0;i<systemList.length;i++)
	{
		if(systemList[i].id!=currentSystem.id)
		{
			var tempSystem = new starsystem(systemList[i].id);

			outs = outs + "<tr>\n";
			outs = outs + "<td>" + tempSystem.name + "</td>\n";
			outs = outs + "<td>" + 
				systemList[i].distance.toString().substring(0,5) + "</td>\n";
			outs = outs + "<td><input type=\"button\" " +
				"value=\"Set Destination\" " +
				"onclick=\"setJumpDestination(" + systemList[i].id + "); " +
				"paintJumpMenu();\"></td>\n";
			outs = outs + "<td>" +
					tempSystem.xpos + "," +
					tempSystem.ypos + "</td>\n"
			outs = outs + "</tr>\n";	
		}
	}

	outs = outs + "</table>\n";

	outs = outs + "<input type=\"button\" value=\"JUMP\" " +
			"onclick=\"updateLog(doJump());\">";

	outs = outs + "<input type=\"button\" value=\"Back\" " +
			"onclick=\"paintPlayerHUD();\">";

	document.getElementById("hudwindow").innerHTML = outs;
}

function paintDockedMode()
{
	var outs = "";

	outs = outs + "<p><strong>" + currentSystem.name + "</strong> | ";
	outs = outs + "Current Credit : " + gameRef.credit + "c | ";
	outs = outs + "Current Fuel : " + gameRef.fuel + "</p>\n";

	outs = outs + showStockMarket();

	outs = outs + "<input type=\"button\" value=\"Stock Market\">&nbsp;\n";
	outs = outs + "<input type=\"button\" value=\"Ship Upgrades\" disabled>&nbsp;\n";
	outs = outs + "<input type=\"button\" value=\"Ship Market\" disabled><br>\n";
	outs = outs + "<input type=\"button\" value=\"Messages & Missions\" disabled>&nbsp;\n";
	outs = outs + "<input type=\"button\" value=\"System Information\" disabled><br>\n";
	outs = outs + "<input type=\"button\" value=\"Undock & Launch\" " +
			"onclick=\"paintPlayerHUD();\"><br>\n";

	document.getElementById("hudwindow").innerHTML = outs;
}

function paintPlayerHUD()
{
	var outs = "";

	outs = outs + "<p><strong>" + currentSystem.name + "</strong> | ";
	outs = outs + "Current Credit : " + gameRef.credit + "c | ";
	outs = outs + "Current Fuel : " + gameRef.fuel + "</p>\n";

	outs = outs + "<br>\n";
	outs = outs + "<table width=\"100%\"><tr><td width=\"50%\" valign=\"top\">\n";
	outs = outs + "<p><strong>Player Vessel:</strong></p>\n";
	
	if((playerVessel.destroyed != 1) && (playerVessel.derelict != 1))
	{
		outs = outs + showShipDetails(playerVessel);
	}
	else if(playerVessel.derelict == 1)
	{
		outs = outs + "<font color=\"red\"><strong>DERELICT. GAME OVER" +
			"</font></strong>\n";
	}
	else
	{
		outs = outs + "<font color=\"red\"><strong>DESTROYED. GAME OVER" +
			"</font></strong>\n";
	}

	outs = outs + "</td><td width=\"50%\" valign=\"top\">\n";

	if(typeof enemyVessel!="undefined")
	{
		outs = outs + "<p><strong>Enemy Contact:</strong></p>\n";

		if((enemyVessel.destroyed!=1)&&(enemyVessel.derelict!=1))
		{
			outs = outs + showShipDetails(enemyVessel);
		}
		else if(enemyVessel.derelict == 1)
		{
			outs = outs + "<font color=\"green\"><strong>DERELICT</strong>" +
				"</font>\n";
		}
		else
		{
			outs = outs + "<font color=\"green\"><strong>DESTROYED</strong>" +
				"</font>\n";
		}
	}
	else
	{
		outs = outs + "&nbsp;";
	}

	outs = outs + "</td></table>\n";
	outs = outs + "<br>\n";

	for(i=0;i<playerVessel.hardpoints;i++)
	{
		outs = outs + "<input type=\"button\" style=\"width:100px\" value=\""

		if(playerVessel.weapons[i].cooldownticksremaining>0)
		{
			outs = outs + playerVessel.weapons[i].cooldownticksremaining +
				"\" ";
		}
		else
		{
			outs = outs + "Fire " +
				playerVessel.weapons[i].name + "\" ";
		}

		if((playerVessel.weapons[i].usesammo==1) && 
			(playerVessel.weapons[i].currentammo==0) ||
			(playerVessel.destroyed==1) ||
			(playerVessel.derelict==1) ||
			(playerVessel.weapons[i].cooldownticksremaining>0) ||
			(typeof enemyVessel=="undefined"))
		{
			outs = outs + " disabled";
		}
		else if(enemyVessel.destroyed==1)
		{
			outs = outs + " disabled";
		}
		else
		{
			outs = outs + "onclick=\"performBeforeTurnActions(); " +
						"firePlayerWeapon(" + i + "); " +
						"performAfterTurnActions();\"";
		}

		outs = outs + ">&nbsp;";
	}

	outs = outs + "<input type=\"button\" value=\"" +
			"Flee\" " +
			"onclick=\"performBeforeTurnActions(); " +
					"flee(); " +
					"performAfterTurnActions();\"";

	if(typeof enemyVessel!="undefined")
	{
		if((enemyVessel.derelict!=0) || (enemyVessel.destroyed!=0) || (playerVessel.destroyed==1) || (playerVessel.derelict==1))
		{		
			outs = outs + " disabled";
		}
	}
	else
	{
		outs = outs + " disabled";
	}

	outs = outs + ">&nbsp;\n";

	outs = outs + "<br>\n";

	outs = outs + "<input type=\"button\" value=\"" +
			"Visit Starbase\" " +
			"onclick=\"updateLog(doDock()); " +
			"paintDockedMode();\"";

	if(typeof enemyVessel!="undefined")
	{
		if((enemyVessel.derelict==0) && (enemyVessel.destroyed==0))
		{		
			outs = outs + " disabled";
		}
	}

	outs = outs + ">&nbsp;";

	outs = outs + "<input type=\"button\" value=\"" +
			"Patrol\" " +
			"onclick=\"updateLog(patrolSpace());\"";

	if(typeof enemyVessel!="undefined")
	{
		if((enemyVessel.derelict==0) && (enemyVessel.destroyed==0))
			outs = outs + " disabled";
	}

	outs = outs + ">&nbsp;";

	outs = outs + "<input type=\"button\" value=\"" +
			"Jump Menu\" " +
			"onclick=\"paintJumpMenu();\"";

	if(typeof enemyVessel!="undefined")
	{
		if((enemyVessel.derelict==0) && (enemyVessel.destroyed==0))
			outs = outs + " disabled";
	}

	outs = outs + ">&nbsp;";

	outs = outs + "<input type=\"button\" value=\"View Cargo Bay\" " +
			"onclick=\"paintPlayerCargo();\"";
	
	if((playerVessel.destroyed==1) || (playerVessel.derelict==1))
		outs = outs + " disabled";
		
	outs = outs + ">&nbsp;";

	document.getElementById("hudwindow").innerHTML = outs;
}

// Constants
var BURNTODEATHCHANCE = 2;
var BURNDAMAGE = 5;
var SUCKEDINTOSPACECHANCE = 5;
var NUMBEROFSYSTEMS = 1500;
var STARTSYSTEM =1234;

// Init stuff
var weaponsList = initialiseWeaponsList();
var shipsList = initialiseShipsList();
var cargoList = initialiseCargoList();
var planetNameArray = getManySystemNames(NUMBEROFSYSTEMS);
var currentSystemId = STARTSYSTEM;
var currentSystem = new starsystem(currentSystemId);

// Hardcoded "game"
var gameRef = new game();
gameRef.mode = "space"; // ... because we always start in space right now.
gameRef.credit = 100;
gameRef.jumpdestinationid = STARTSYSTEM;
gameRef.fuel = 10;
gameRef.range = 5;

// Hardcoded player ship values
var playerVessel = new ship(20,20,"Lancer","Mayfly",3,1,20);

playerVessel.weapons[0] = new weapon("Laser",5,1,0,0,1,70,0,0);
playerVessel.weapons[1] = new weapon("Missile",10,3,1,2,1,70,0,0);
playerVessel.weapons[2] = new weapon("Laser",5,1,0,0,1,70,0,0);
playerVessel.crew[0] = new crewmember("","Human");
playerVessel.crew[0].name = playerVessel.crew[0].generateRandomName();
playerVessel.cargobay.contents[0].id=0;
playerVessel.cargobay.contents[0].quantity=4;

// One enemy vessel for now - may have more later
var enemyVessel;

paintPlayerHUD();

</script>
</body>
</html>